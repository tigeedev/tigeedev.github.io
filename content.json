{"meta":{"title":"Tigee's Blog","subtitle":"","description":"","author":"Tigee","url":"http://www.tigeedev.cn"},"pages":[{"title":"about","date":"2021-01-26T08:55:30.000Z","updated":"2021-03-12T04:16:01.735Z","comments":true,"path":"about/index.html","permalink":"http://www.tigeedev.cn/about/index.html","excerpt":"","text":"欢迎来到这里。 关于博客&emsp;&emsp;本站采用 Hexo 框架，使用 Snippet 主题，托管于GitHub（已迁移到阿里云）。 &emsp;&emsp;搭建过程参考了不少大佬的文章，会同步更新于Hexo使用笔记 ，方便日后参考查看"}],"posts":[{"title":"git常用命令","slug":"git常用命令","date":"2023-08-26T06:48:50.000Z","updated":"2024-01-08T14:56:13.881Z","comments":false,"path":"2023/08/26/git常用命令/","link":"","permalink":"http://www.tigeedev.cn/2023/08/26/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Git提交代码到指定分支123456git clone -b rongmei2022 仓库地址 #拉取指定分支git status #查看文件的状态git add . #把所有改过的文件都放到缓存区git commit -m &#x27;注释&#x27; #把文件从缓存区放到本地仓库内git push origin rongmei2022 #把到本地仓库的代码推送到远程仓库git pull #把远程仓库的代码拉到本地仓库 Git提交代码到新分支 获取远程代码修改后,想要push到远端与原来不同的新分支，可以使用下面的命令实现： 12git push origin 本地分支:远端希望创建的分支git push origin master:my_remote_new_branch Git reset（回滚） 回滚到指定历史版本 12345# 1.先使用git log查看一下历史版本git log# 2.在使用git reset --hard命令回滚git reset --hard 你要回滚的id值# 举例：git reset --hard 10086 回滚到当前版本的上一个版本 1234git reset --hard HEAD^ #回退到上一个版本git reset --hard HEAD~2 #回退两个版本# 注意：这里的~2指回滚多少次，HEAD~2代表回滚master前二个版本 Git解决本地冲突 git pull –rebase origin mastergit rebase –continue 1、git push时报错：failed to push some refs to… 1234567$ git pusherror: failed to push some refs to &#x27;http...git&#x27;$ git pull --rebase origin master -&gt; git push原因：这是远程库与本地库不一致造成的，只要把远程库同步到本地库即可上面指令的意思是把远程库中的更新合并到本地库中，–rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。 2、执行完 git pull –rebase origin master 后有合并冲突 参考文章：git的冲突解决–git rebase之abort、continue、skip 123456789101112$ git status 查看发生冲突的文件, 然后手动解决冲突 (删除冲突的代码)$ 接着执行 git add . | git commit -m &#x27;&#x27;$ 再次执行 git status, 如果没有冲突的文件，则可以提交。$ git rebase --continue -&gt; git pushSuccessfully rebased and updated refs/heads/master# 执行完 $ git pull --rebase 之后，本地如果产生冲突，手动解决冲突之后，用&quot;git add&quot;命令去更新这些内容的索引。然后执行 $ git rebase --continue 就可以线性的连接本地分支与远程分支，无误之后就会退出，回到主分支上。注意：一般情况下，修改后检查没问题，使用rebase continue来合并冲突。 Git更换远程仓库地址12345678# 方法一git remote -v #查看远端地址git remote #查看远端仓库名git remote set-url origin https://github.com/xx/xx.git #新地址# 方法二git remote rm origin #删除远程的仓库git remote add origin https://github.com/xx/xx.git #重新添加远程仓库 Git.gitignore文件无效在初始化git仓库时没有创建 .gitignore 文件来过滤不必要提交的文件，后来发现某些文件不需要提交时，再创建 .gitignore 来忽略这些文件只会对没有被跟踪的文件有效，已经被跟踪的文件不会被忽略。 可以先把本地缓存删除，然后再提交。 1git rm -r --cached 要忽略的文件 参考文章： 使用.gitignore忽略文件或者文件夹及其失效解决方法 git如何忽略已经提交的文件 (.gitignore文件无效) Git常用命令1234567891011121314git init //初始化项目git log //提交日志 全部显示git log --oneline //提交日志 优雅显示git commit --amend //修改提交的信息git config --list //查看基本配置git config --global user.name &#x27;xxx.yyyzzz&#x27; //配置基本信息：用户名git config --global user.email &#x27;xxx.yyyzzz@jnetdata.com&#x27; //配置基本信息：邮箱git remote add origin URL（仓库地址） //将本地仓库关联到远程仓库git branch //查看当前分支git branch &lt;name&gt; //创建新分支git checkout -b &lt;name&gt; //创建并切换到新分支git branch -d &lt;name&gt; //删除分支git checkout &lt;name&gt; //切换分支git push origin master //把本地仓库的master分支推送到远程仓库的master分支","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.tigeedev.cn/tags/Git/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"跨源通信：在不同服务器间安全传递Token","slug":"跨源通信：在不同服务器间安全传递Token","date":"2023-08-20T12:10:26.000Z","updated":"2024-03-20T14:47:12.686Z","comments":true,"path":"2023/08/20/跨源通信：在不同服务器间安全传递Token/","link":"","permalink":"http://www.tigeedev.cn/2023/08/20/%E8%B7%A8%E6%BA%90%E9%80%9A%E4%BF%A1%EF%BC%9A%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%B4%E5%AE%89%E5%85%A8%E4%BC%A0%E9%80%92Token/","excerpt":"","text":"跨源通信：在不同服务器间安全传递Token1. 问题描述服务器A 上有一个页面，该页面通过 iframe 方式嵌入到 服务器B 的页面中。我想在 服务器A 的页面中存储一个 token，并且在 服务器B 的页面中获取这个 token。 2. 难点这个问题涉及到跨域资源共享（CORS）和浏览器的同源策略。由于 服务器A 和 服务器B 是不同的域，所以它们不能直接共享数据，比如通过 localStorage 把 token 存到本地就不可取。 3. 解决方法window.postMessage 方法允许不同源之间的窗口进行通信，服务器A 的页面是通过iFrame嵌入到另一个服务器页面的，正好适用。所以可以在iFrame页面（服务器A）上发送消息，在父页面（服务器B）上设置事件监听器来接收这些消息。 发送消息的页面（服务器A） 在 服务器A 的页面中，使用以下代码向 服务器B 发送消息： 1234567891011function sendMessageToParent(token) &#123; var parentWindow = window.parent; // 获取目标页面的window对象 var message = &#123; type: &#x27;token&#x27;, data: token &#125;; // 使用&#x27;*&#x27;作为目标源可以接收来自任何源的消息, 也可以指定目标源。 parentWindow.postMessage(message, &#x27;*&#x27;);&#125;// 发送 token 到 服务器Bvar tokenValue = &#x27;token&#x27;;sendMessageToParent(tokenValue); 接收消息的页面（服务器B） 在 服务器B 的页面中，使用以下代码接收来自 服务器A 的消息： 12345678910111213141516function receiveMessage(event) &#123; // 通过event.origin检查消息发送者的源 // if (event.origin !== &#x27;http://服务器A&#x27;) &#123; return; &#125; // 检查消息类型 if (event.data.type &amp;&amp; event.data.type === &#x27;token&#x27;) &#123; var token = event.data.data; console.log(&#x27;接收token: &#x27;, token); //token存到本地 localStorage.setItem(&quot;token&quot;,token) &#125;&#125;// 添加事件监听器来接收消息window.addEventListener(&#x27;message&#x27;, receiveMessage, false);","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"http://www.tigeedev.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"处理付款二维码","slug":"处理付款二维码","date":"2023-06-15T13:40:11.000Z","updated":"2024-03-20T15:08:25.003Z","comments":true,"path":"2023/06/15/处理付款二维码/","link":"","permalink":"http://www.tigeedev.cn/2023/06/15/%E5%A4%84%E7%90%86%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81/","excerpt":"","text":"处理付款二维码一般情况下，图像数据（尤其是GIF格式）不会以纯文本形式返回，而是以二进制流或Base64编码的字符串返回。比如付款二维码可能会是GIF格式，我们在处理时就要确保返回的是二进制数据 设置响应类型：responseType: &#39;arraybuffer&#39; //设置响应类型为arraybuffer (二进制数据) 处理响应数据: 将二进制数据转换为Base64字符串 12345678910111213141516getPriceQR() &#123; let param = &#123; memberLimit: &#x27;20&#x27; &#125; uni.request(&#123; url: baseUrl + &#x27;/media/memberShip/purchasebywx?userId=&#x27; + this.userID, data: JSON.stringify(param), method: &quot;POST&quot;, responseType: &#x27;arraybuffer&#x27;, //设置响应类型为arraybuffer (二进制数据) header: &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125; &#125;).then((result) =&gt; &#123; let [err, res] = result; // console.log(&quot;res&quot;,res); // 将图像数据处理成 base64 格式 let selectedQR = &#x27;data:image/png;base64,&#x27; + btoa(new Uint8Array(res.data) .reduce((data, byte) =&gt; data + String.fromCharCode(byte), &#x27;&#x27;)) &#125;)&#125; 二维码正常显示后，前端可以采用轮询的方式，判断用户是否支付成功。","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"http://www.tigeedev.cn/tags/uni-app/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"小程序使用腾讯导航路线规划功能","slug":"小程序使用腾讯导航路线规划功能","date":"2023-05-24T12:30:21.000Z","updated":"2024-03-20T14:37:09.621Z","comments":true,"path":"2023/05/24/小程序使用腾讯导航路线规划功能/","link":"","permalink":"http://www.tigeedev.cn/2023/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%E5%8A%9F%E8%83%BD/","excerpt":"","text":"小程序使用腾讯导航路线规划功能小程序后台添加腾讯位置服务路线规划插件小程序后台 &gt; 设置 &gt; 第三方设置 &gt; 插件管理 &gt; 添加《腾讯位置服务路线规划》插件 插件详情中查看AppId和版本号AppId和版本号，参考 腾讯位置服务路线规划开发文档 项目的pages.json中引入插件并开启位置服务注意：manifest.json 源码文件的 mp-weixin 对象中也需要添加 1234567891011&quot;plugins&quot;: &#123; &quot;routePlan&quot;: &#123; &quot;version&quot;: &quot;1.0.19&quot;, &quot;provider&quot;: &quot;wx50b5593e81dd937a&quot; &#125;&#125;,&quot;permission&quot;: &#123; &quot;scope.userLocation&quot;: &#123; &quot;desc&quot;: &quot;你的位置信息将用于小程序位置接口的效果展示&quot; &#125;&#125; 实现Demo12345678910111213141516171819202122232425&lt;template&gt; &lt;view&gt; &lt;button class&#x3D;&quot;btn-long&quot; @click&#x3D;&quot;doNavi()&quot;&gt;导航&lt;&#x2F;button&gt; &lt;&#x2F;view&gt;&lt;&#x2F;template&gt; &lt;script&gt;export default &#123; methods: &#123; doNavi() &#123; let plugin &#x3D; requirePlugin(&#39;routePlan&#39;); let key &#x3D; &#39;QTOBZ-VSO35-MKWIS-I2I4G-ATD5S-NZBID&#39;; &#x2F;&#x2F;使用在腾讯位置服务申请的key let referer &#x3D; &#39;小程序&#39;; &#x2F;&#x2F;调用插件的app的名称 let endPoint &#x3D; JSON.stringify(&#123; &#x2F;&#x2F;终点 &#39;name&#39;: &#39;山西质监检测中心六号楼食品院&#39;, &#39;latitude&#39;: 37.69331695869906, &#39;longitude&#39;: 112.7597089963646 &#125;); uni.navigateTo(&#123; url: &#39;plugin:&#x2F;&#x2F;routePlan&#x2F;index?key&#x3D;&#39; + key + &#39;&amp;referer&#x3D;&#39; + referer + &#39;&amp;endPoint&#x3D;&#39; + endPoint &#125;); &#125; &#125;,&#125;&lt;&#x2F;script&gt; 参考文章路线规划插件开发指南 uniapp-微信小程序腾讯地图导航 uniapp 微信小程序内打开腾讯导航路线规划","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"http://www.tigeedev.cn/tags/uni-app/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.tigeedev.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"uni-app微信小程序跳转外部链接","slug":"uni-app微信小程序跳转外部链接","date":"2023-03-20T02:30:39.000Z","updated":"2024-03-20T14:31:46.436Z","comments":true,"path":"2023/03/20/uni-app微信小程序跳转外部链接/","link":"","permalink":"http://www.tigeedev.cn/2023/03/20/uni-app%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5/","excerpt":"","text":"uni-app微信小程序跳转外部链接uni.navigateTo 可以跳转到项目的内部页面，然后内部页面接收需要跳转到外部的URL，通过 webview 来打开外部链接。 1. 新建一个内部页面webview.vue12345678910111213141516171819202122&lt;template&gt; &lt;view&gt; &lt;web-view :src&#x3D;&quot;url&quot;&gt;&lt;&#x2F;web-view&gt; &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; url: &#39;&#39; &#125; &#125;, onLoad(options) &#123; this.url &#x3D; decodeURIComponent(options.url) console.log(this.url) &#x2F;&#x2F; 传入需要跳转的链接 使用web-view标签进行跳转 &#125;&#125;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot;&gt; &lt;&#x2F;style&gt; 在 pages.json 里面注册这个页面 1234567&#123; &quot;path&quot; : &quot;pages/common/webview&quot;, &#123; &quot;navigationBarTitleText&quot;: &quot;&quot;, &quot;enablePullDownRefresh&quot;: false &#125;&#125; 2. 点击跳转外部链接12345678910111213//页面&lt;view @click=&quot;skipLink()&quot;&gt; 跳转外部链接 &lt;/view&gt;//对应方法skipLink() &#123; // URL是要跳转的外部地址 作为参数 let url = &#x27;http...&#x27; uni.navigateTo(&#123; // 传url到webview界面,实现跳转 url: &#x27;/pages/common/webview?url=&#x27; + url &#125;)&#125; 3. 参考链接web-view官方文档","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"http://www.tigeedev.cn/tags/uni-app/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.tigeedev.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"H5和微信小程序获取页面url","slug":"H5和微信小程序获取页面url","date":"2023-03-15T01:40:15.000Z","updated":"2024-03-20T14:25:41.058Z","comments":true,"path":"2023/03/15/H5和微信小程序获取页面url/","link":"","permalink":"http://www.tigeedev.cn/2023/03/15/H5%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2url/","excerpt":"","text":"H5和微信小程序获取页面url1. 问题说明项目中，跳转页面过程中，有时会带有一些参数，比如：http.../pages/index/index?id=XXX&amp;name=XXX 要拿到链接后的参数有多种方法，在h5页面中可以用 location.href 直接获取页面路径，然后再进行处理。而在小程序中就要用 getCurrentPages() 获取页面栈后再进行操作。 2. h5获取url中”?”符后的参数1234567891011121314getRequest() &#123; let url = location.href; let requestParams = &#123;&#125;; if (url.indexOf(&quot;?&quot;) !== -1) &#123; let str = url.substr(url.indexOf(&quot;?&quot;) + 1); //截取?后面的内容作为字符串 let strs = str.split(&quot;&amp;&quot;); //将字符串内容以&amp;分隔为一个数组 for (let i = 0; i &lt; strs.length; i++) &#123; requestParams[strs[i].split(&quot;=&quot;)[0]] = decodeURI(strs[i].split(&quot;=&quot;)[1]); // 将数组元素中&#x27;=&#x27;左边的内容作为对象的属性名，&#x27;=&#x27;右边的内容作为对象对应属性的属性值 &#125; &#125; return requestParams;&#125; 3. 微信小程序获取页面url小程序不能直接用 location.href 获取参数，需要使用 getCurrentPages() 获取页面栈后再进行操作 12345678910111213// mounted中调用getRequest() &#123; let pages = getCurrentPages(); //获取加载的页面 let currentPage = pages[pages.length - 1]; //获取当前页面的对象 let url = currentPage.route //当前页面url let options = currentPage.options; // 获取url中所带的参数 console.log(&quot;获取url中所带的参数&quot;,options) //比如：获取参数后面的id和name this.lmid = options.id this.lmname = options.name&#125; 可以写成工具函数放到utils中： 123456789101112131415161718192021222324252627282930/*获取当前页url*/function getCurrentPageUrl()&#123; var pages = getCurrentPages() //获取加载的页面 var currentPage = pages[pages.length-1] //获取当前页面的对象 var url = currentPage.route //当前页面url return url&#125;/*获取当前页带参数的url*/function getCurrentPageUrlWithArgs()&#123; var pages = getCurrentPages() //获取加载的页面 var currentPage = pages[pages.length-1] //获取当前页面的对象 var url = currentPage.route //当前页面url var options = currentPage.options //如果要获取url中所带的参数可以查看options //拼接url的参数 var urlWithArgs = url + &#x27;?&#x27; for(var key in options)&#123; var value = options[key] urlWithArgs += key + &#x27;=&#x27; + value + &#x27;&amp;&#x27; &#125; urlWithArgs = urlWithArgs.substring(0, urlWithArgs.length-1) return urlWithArgs&#125;module.exports = &#123; getCurrentPageUrl: getCurrentPageUrl, getCurrentPageUrlWithArgs: getCurrentPageUrlWithArgs&#125; 4. 参考文章小程序获取当前页面URL","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"http://www.tigeedev.cn/tags/uni-app/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.tigeedev.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"uni-app微信小程序保持登录状态","slug":"uni-app微信小程序保持登录状态","date":"2023-03-11T02:56:49.000Z","updated":"2024-03-20T14:19:32.913Z","comments":true,"path":"2023/03/11/uni-app微信小程序保持登录状态/","link":"","permalink":"http://www.tigeedev.cn/2023/03/11/uni-app%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8C%81%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81/","excerpt":"","text":"uni-app微信小程序保持登录状态整体流程：首页为未登录状态 =&gt; 进行登录 =&gt; 首页状态改变 =&gt; 退出应用再次进入仍然是已登录状态。 Vuex：使用 vuex 进行管理登陆状态和保存用户信息 1. 根目录新建store/index.js1234567891011121314151617181920212223242526272829303132import Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;Vue.use(Vuex)const store = new Vuex.Store(&#123; state: &#123; // 是否登录标识 hasLogin: false, // 账号信息 userInfo: &#123;&#125; &#125;, mutations: &#123; //登录 login(state, userInfo) &#123; state.hasLogin = true // 从一个或多个源对象复制到目标对象, 相同属性会被覆盖 state.userInfo = Object.assign(&#123;&#125;, state.userInfo, userInfo); //将用户信息保存在本地 uni.setStorageSync(&#x27;userInfo&#x27;, state.userInfo) &#125;, //退出登录 logout(state) &#123; state.userInfo = &#123;&#125; state.hasLogin = false uni.removeStorageSync(&#x27;userInfo&#x27;) &#125; &#125;&#125;)export default store 2. main.js配置12345678910111213141516import App from &#x27;./App&#x27;import Vue from &#x27;vue&#x27;import uView from &#x27;@/uni_modules/uview-ui&#x27;import store from &#x27;./store/index.js&#x27; // 1.导入storeVue.use(uView)Vue.config.productionTip = falseApp.mpType = &#x27;app&#x27;Vue.prototype.$store = store // 2.vuexconst app = new Vue(&#123; store, // 3.使用 ...App&#125;)app.$mount() 3. login中使用vuex在 login.vue（登录页面）输入用户名密码后，调用接口进行登录，登录成功后调用 vuex 的方法改变应用的登陆状态。 123456789101112131415161718192021222324&lt;script&gt; import &#123; mapMutations &#125; from &#39;vuex&#39;; export default &#123; methods: &#123; ...mapMutations([&#39;login&#39;]), onSubmit() &#123; &#x2F;&#x2F; 手机号密码登录 let httpData &#x3D; &#123;&quot;name&quot;: this.phone,&quot;passWord&quot;: this.password&#125;; uni.$u.http.post(baseUrl + &#39;&#x2F;member&#x2F;home&#x2F;wxbackAjaxLogin&#39;, httpData).then(res &#x3D;&gt; &#123; if (res.data.success) &#123; &#x2F;&#x2F; 登录成功后改变vuex的状态 let userInfo &#x3D; &#123;&quot;mspToken&quot;: res.data.mspToken,&quot;id&quot;: res.data.userid&#125; this.login(userInfo) &#x2F;&#x2F;跳转首页 uni.switchTab(&#123; url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39; &#125;) &#125; &#125;); &#125;, &#125; &#125; &lt;&#x2F;script&gt; 4. 改变首页状态在index.vue中，通过 vuex 中保存的 hasLogin 判断是否是登录状态，从而显示不同的内容。 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;view class&#x3D;&quot;page&quot;&gt; &lt;view v-if&#x3D;&quot;!hasLogin&quot;&gt;现在是未登录状态，点击按钮进行登录&lt;&#x2F;view&gt; &lt;view v-else&gt;现在是登录状态，您的用户id是：&#123;&#123;userInfo.userName&#125;&#125;&lt;&#x2F;view&gt; &lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;bindLogin&quot;&gt;&#123;&#123;hasLogin ? &#39;退出登录&#39; : &#39;登录&#39;&#125;&#125;&lt;&#x2F;button&gt; &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script&gt; import &#123; mapState, mapMutations &#125; from &#39;vuex&#39;; export default &#123; computed: &#123; ...mapState([&#39;hasLogin&#39;, &#39;userInfo&#39;]) &#125;, methods: &#123; ...mapMutations([&#39;logout&#39;]), bindLogin() &#123; if (this.hasLogin) &#123; this.logout() &#125; else &#123; uni.navigateTo(&#123; url: &#39;&#x2F;pages&#x2F;login&#x2F;login&#39; &#125;) &#125; &#125; &#125; &#125;&lt;&#x2F;script&gt;&lt;style&gt; .page&#123; padding: 50upx 30upx; &#125; view&#123; line-height: 1.5; font-size: 32upx; &#125; button&#123; margin-top: 30upx; height: 80upx; line-height: 80upx; &#125;&lt;&#x2F;style&gt; 5. 再次进入应用在 App.vue 中判断是否保存用户信息 “userInfo”，如果保存则认为是登录状态，未保存则为未登录状态。 App.vue 中得到用户信息后需要同步改变 vuex 的状态，使所有页面都能共享登陆状态与用户信息。 12345678910111213141516&lt;script&gt; import &#123; mapMutations &#125; from &#39;vuex&#39;; export default &#123; onLaunch: function () &#123; &#x2F;&#x2F;获取保存在本地的用户信息 let userInfo &#x3D; uni.getStorageSync(&#39;userInfo&#39;); if(userInfo.id) &#123; &#x2F;&#x2F;更新登录状态 这样就实现了全局保持登录状态 this.login(userInfo) &#125; &#125;, methods: &#123; ...mapMutations([&#39;login&#39;]) &#125; &#125; &lt;&#x2F;script&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"http://www.tigeedev.cn/tags/uni-app/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.tigeedev.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"Hexo 博客的常用配置","slug":"Hexo常用配置","date":"2023-02-08T06:56:28.000Z","updated":"2024-01-08T14:56:47.621Z","comments":true,"path":"2023/02/08/Hexo常用配置/","link":"","permalink":"http://www.tigeedev.cn/2023/02/08/Hexo%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/","excerpt":"","text":"一、hexo常见命令1.1 新建文章输入以下命令后会在 hexo\\source\\_posts 目录下生成 .md 文件，打开即可直接编辑。当执行 hexo generate 命令时，文章会被编译到 public 目录下，生成静态页面 新建文章 1$ hexo new &quot;postName&quot; 本地预览 12hexo clean #清除缓存hexo s -g #生成静态页面并本地预览 1.2 文章发布写完文章，并进行本地预览后，就可以将文章发布到服务器端了 每次部署的三个步骤： 123hexo cleanhexo generatehexo deploy 命令简写： 12hexo clean #清除缓存hexo d -g #生成并上传 1.3 其他常用命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #启动本地预览hexo deploy #将目录部署到服务器hexo help # 查看帮助 hexo version #查看Hexo的版本 二、hexo 文章格式 文章格式可以让文章的信息更完整 2.1 hexo 文章常用格式1234567891011---title: 文章标题categories: - 文章分类(添加一个即可)tags: - 标签1 - 标签2comments: falsedate: 2021-02-08 14:56:28img:--- 2.2 hexo 文章模板的自定义每次使用 hexo new &quot;postName&quot; 新建一篇文章时，默认只有title、date、tags这几个属性。 我们可以修改 hexo\\scaffolds\\post.md 文件，自定义文章格式的模板，修改后的内容如下： 12345678--- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; categories: [&#x27;分类1&#x27;,&#x27;分类2&#x27;] tags: [&#x27;标签1&#x27;,&#x27;标签2&#x27;] comments: false img:--- 参考文章：hexo 博客的常见配置","categories":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tigeedev.cn/tags/Hexo/"}],"keywords":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}]},{"title":"Hexo使用笔记","slug":"Hexo使用笔记","date":"2023-01-26T08:28:01.000Z","updated":"2024-01-08T14:57:10.292Z","comments":true,"path":"2023/01/26/Hexo使用笔记/","link":"","permalink":"http://www.tigeedev.cn/2023/01/26/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"","text":"【00】前言折腾 Hexo 时遇到过不少坑，过程中遇到比较好的文章会在这篇罗列出来，方便以后查看 【01】Hexo搭建指南博客刚开始托管在 Github 和 Coding，折腾了一段时间感觉体验不是很好（速度不够快，而且不能被百度收录），于是又把博客迁移到阿里云轻量应用服务器，学生价还不到一百，美滋滋 :) 教程如下： 使用hexo+github搭建免费个人博客详细教程 使用 Github Pages 和 Hexo 搭建自己的独立博客 hexo+阿里云搭建博客网站（推荐） 将Hexo部署到阿里云轻量服务器 【02】Markdown语法教程教程： 献给写作者的 Markdown 新手指南 【03】Hexo博客优化教程： Hexo 博客主题个性化 Hexo 搭建个人博客系列：主题美化篇 Hexo 博客提交百度、谷歌搜索引擎收录 【04】图床Typora+PicGo+Gitee使用笔记 Typora + OSS 图床详解（小白都能学得会） 阿里云OSS PicGo 配置图床教程 超详细 【05】博客评论博客使用的是 Valine评论系统，主题已经自带稍微配置一下即可 配置过程网上有很多教程，也可参考这篇文章：Valine – 一款极简的评论系统","categories":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tigeedev.cn/tags/Hexo/"}],"keywords":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}]},{"title":"Vue项目运行问题","slug":"Vue项目运行问题","date":"2022-10-26T13:15:08.000Z","updated":"2024-03-20T15:04:02.364Z","comments":false,"path":"2022/10/26/Vue项目运行问题/","link":"","permalink":"http://www.tigeedev.cn/2022/10/26/Vue%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98/","excerpt":"","text":"Vue项目运行问题项目运行基本步骤 12341.下载依赖文件：npm intsall2.修改项目配置, 如后台地址：src\\conf\\conf.js3.启动项目：npm run dev4.打包命令：npm run build 如果运行失败，可以尝试以下步骤，然后重新运行项目。 12341.删除 node_modules 文件夹2.删除 package-lock.json 文件3.运行命令：npm cache clean --force4.重新安装依赖：npm intsall","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.tigeedev.cn/tags/Vue/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"Vue项目打包失败","slug":"Vue项目打包失败","date":"2022-08-26T03:13:06.000Z","updated":"2024-03-20T14:48:53.011Z","comments":false,"path":"2022/08/26/Vue项目打包失败/","link":"","permalink":"http://www.tigeedev.cn/2022/08/26/Vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"Vue项目打包失败的解决方法vue项目在打包时出现如下错误： 123456- building for production...Error processing file: static&#x2F;css&#x2F;app.a791596ecaab5ad11cc0c7b047f1b2c0.cssC:\\Users\\Admin\\Desktop\\tielujiayuan-qianduan\\node_modules\\optimize-css-assets-webpack-plugin\\node_modules\\postcss\\lib\\input.js:128 result &#x3D; new _cssSyntaxError.default(message, line, column, this.css, this.file, opts.plugin);CssSyntaxError: C:\\Users\\Admin\\Desktop\\tielujiayuan-qianduan\\static\\css\\app.a791596ecaab5ad11cc0c7b047f1b2c0.css:17431:6: Unknown word at Input.error (C:\\Users\\Admin\\Desktop\\tielujiayuan-qianduan\\node_modules\\optimize-css-assets-webpack-plugin\\node_modules\\postcss\\lib\\input.js:128:16) 解决办法： 123456789# 在cssLoader中增加如下代码const cssLoader = &#123; loader: &#x27;css-loader&#x27;, options: &#123; sourceMap: options.sourceMap, minimize:true &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.tigeedev.cn/tags/Vue/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"父子组件传值方法","slug":"父子组件传值方法","date":"2022-08-24T06:35:49.000Z","updated":"2022-08-24T07:37:06.298Z","comments":true,"path":"2022/08/24/父子组件传值方法/","link":"","permalink":"http://www.tigeedev.cn/2022/08/24/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%96%B9%E6%B3%95/","excerpt":"","text":"父子组件传值方法父传子通过props传递 123父组件: &lt;children :value &#x3D; &#39;传递的数据&#39; &#x2F;&gt;子组件: props[&#39;value&#39;], 接收数据,接受之后与data中定义的数据使用方式一样 子传父使用自定义事件。子组件通过 $emit() 来触发事件，父组件通过 v-on 来监听子组件事件。 12345678910# 子组件this.$emit(&#39;receive&#39;, &#39;传递的数据&#39;)# 父组件 @子组件绑定事件&#x3D;新方法名&lt;children @receive &#x3D; &#39;receive&#39; &#x2F;&gt;# 父组件接收数据receive(val) &#123; console.log(val);&#125; 兄弟组件传值 通过bus事件总线传值 12345678910111. main.js中创建一个事件总线 // 建立中转站let bus = new Vue();Vue.prototype.bus = bus;2. methods中定义函数发送this.bus.$emit(&quot;getData&quot;, this.data1);3. created中接收数据this.bus.$on(&quot;getData&quot;,function(val)&#123; console.log(val);&#125;) 通过vuex $refs 传值当父组件需要访问子组件中的数据/方法时，可使用 $refs 方式 12345678# ref 负责给子组件绑定特定的ID, 然后用 $refs 访问该子组件# 父组件&lt;children ref = &#x27;child1&#x27; /&gt;&lt;children2 ref = &#x27;child2&#x27; /&gt;# 访问子组件数据this.$refs.child1.数据 参考文章：父子组件传值方法","categories":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.tigeedev.cn/tags/Vue/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.tigeedev.cn/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"Nginx在同一个域名下配置多个项目","slug":"Nginx在同一个域名下配置多个项目","date":"2022-08-20T11:39:49.000Z","updated":"2024-01-08T14:57:24.963Z","comments":false,"path":"2022/08/20/Nginx在同一个域名下配置多个项目/","link":"","permalink":"http://www.tigeedev.cn/2022/08/20/Nginx%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"前言服务器可以部署多个项目，在只有一个域名的情况下，可以给不同的项目分配不同的二级域名来进行访问。 配置过程1. 添加二级域名 添加A记录到主机 同一个域名可以解析出N个二级域名 2. 配置nginx nginx 中另添加一个 server 修改后重启nginx 先使用 nginx -t 测试语法是否正确 使用命令 nginx -s reload 重新加载配置文件 123456789101112131415161718192021222324252627282930313233# hexo博客#server &#123; listen 80; server_name www.tigeedev.com; location &#x2F; &#123; root &#x2F;var&#x2F;hexo; index index.html index.htm; &#125; #error_page 404 &#x2F;404.html; # redirect server error pages to the static page &#x2F;50x.html # error_page 500 502 503 504 &#x2F;50x.html; location &#x3D; &#x2F;50x.html &#123; root html; &#125;&#125;# 商城项目#server &#123; listen 80; server_name shop.tigeedev.com; location &#x2F; &#123; root &#x2F;var&#x2F;mall; index index.html index.htm; try_files $uri $uri&#x2F; &#x2F;index.html; #使用history模式进行路由 &#125;&#125; 参考文章 Nginx同一个域名配置多个项目","categories":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://www.tigeedev.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"nginx","slug":"nginx","permalink":"http://www.tigeedev.cn/tags/nginx/"}],"keywords":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}]},{"title":"SSH 无法连接 CentOS","slug":"SSH 无法连接 CentOS","date":"2022-03-11T12:56:49.000Z","updated":"2024-01-08T14:57:35.789Z","comments":true,"path":"2022/03/11/SSH 无法连接 CentOS/","link":"","permalink":"http://www.tigeedev.cn/2022/03/11/SSH%20%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%20CentOS/","excerpt":"","text":"问题描述服务器是阿里云，CentOS 7.3 今天刚完成备案，刚想接着折腾，结果发现 ssh 远程连接一直提示 Connection timed out（ping没问题） 日志详情 1234567$ ssh -v git@公网 IPOpenSSH_8.4p1, OpenSSL 1.1.1i 8 Dec 2020debug1: Reading configuration data &#x2F;etc&#x2F;ssh&#x2F;ssh_configdebug1: Connecting to IP [IP] port 22.debug1: connect to address IP port 22: Connection timed outssh: connect to host IP port 22: Connection timed out 端口情况 123456# sudo netstat -plntActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID&#x2F;Program name tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 2334&#x2F;nginx: master tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 2055&#x2F;sshd 解决方法连接不上可能是由于网络环境导致。之前 SSH 一直都正常连接，到学校才发现会 time out。所以校园网很可能是那个罪魁祸首 … 果不其然，用手机的 4G 开个热点就可以正常连接了。一点小问题折腾了一下午…淦 参考链接 Linux Ubuntu 无法连接 ssh connect to host port 22: Connection timed out 校园网手机ssh连接vm虚拟机linux教程","categories":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://www.tigeedev.cn/tags/ssh/"}],"keywords":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}]},{"title":"Typora+PicGo+Gitee使用笔记","slug":"Typora+PicGo+Gitee使用笔记","date":"2022-02-08T06:57:01.000Z","updated":"2024-01-08T14:57:49.189Z","comments":true,"path":"2022/02/08/Typora+PicGo+Gitee使用笔记/","link":"","permalink":"http://www.tigeedev.cn/2022/02/08/Typora+PicGo+Gitee%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"","text":"一、前言之前我的写作方案一直是：Typora + OneDrive 。因为这样所有操作都可以在本地进行，没有上传图片的烦恼 但是在博客写作中想要插入一些图片时，就需要将图片上传至图床生成 URL。网上一番探索后，最终挑选出以下几种方案： 阿里云对象存储 OSS（一年9块） Github图床 + jsdelivr 的 CDN 加速。参考文章：Github+jsDelivr+PicGo 打造稳定快速、高效免费图床 Gtiee图床（码云） 所以目前我也有了一套比较满意的写作方案： Typora+ PicGo + Gitee 。使用Typora编写markdown笔记，Gitee作为图床，PicGo用于自动上传图片。完美~ 配置过程顺便做了笔记，留作以后参考。 二、本文工具介绍 Gitee ：国内版的Github，功能跟Github基本一样，而且在国内访问非常快，用作图床再合适不过 PicGo ：一个用于快速上传图片并获取图片 URL 链接的工具，可以关联 Gitee 仓库，上传图片非常方便 Typora ：一款优雅的markdown编辑器，所见即所得的方式让人爱不释手。新版的Typora已经支持PicGo ，写作过程中插入图片便可直接上传至 Gitee Markdown 是一种轻量级标记语言，Github中的帮助文档也是统一使用 Markdown 编写。语法十分简单，十分钟便可入门。推荐学习教程：献给写作者的 Markdown 新手指南 三、配置 Gitee3.1 新建仓库登录 gitee ，点击右上角的 + 号，新建仓库 3.2 新建仓库基本配置输入仓库名称，选择公开仓库，勾选使用 Readme 文件初始化这个仓库，然后点击 “创建” 即可 3.3 生成私人令牌（token）点击设置-私人令牌-生成新令牌。注意令牌只会显示一次，要注意保存，后面在 PicGo 中会用到。如果忘记也可以删除重新生成。 四、安装配置 PicGo4.1 安装图床插件由于 PicGo 本体并不支持 Gitee 图床，所以需要通过第三方图床插件来实现。找到 gitee-uploader 插件，安装成功图床中便会出现 gitee 一栏 注意：电脑中必须先安装 node.js 才能安装插件，安装完重启即可 4.2 配置 gitee 图床 repo：用户名/仓库名称，比如我自己的仓库 tigeedev/blog-Image branch：分支，填 master token：填入前面码云的私人令牌，搞丢了可以重新生成 path：路径，一般写上 img customPath：这一项和下一项都不用填 然后点击确定，并设为默认图床 4.3 激活PicGo-Server2.2 版本之后，PicGo内部会默认开启一个小型的服务器，用于配合其他应用来调用PicGo进行上传。 打开 PicGo 设置页面，点击 “设置 Server” ，参考下图进行设置即可。 到这一步，已经可以在 PicGo 中上传图片了。上传成功 PicGo 会有提示，也可以在 Gitee 仓库中查看 五、配置 Typora用 Typora 写作时，如果插入的图片能直接上传到 Gitee 岂不是很方便？所以在 Typora 0.9.84 及以上版本已经支持了 PicGo 点击 文件–偏好设置–图像，插入图片时选择 “上传图片” ，然后下面选择本地 PicGo 的路径即可 验证图片上传 点击 “验证图片上传” ，验证成功会返回如下结果。 至此已经全部设置完成，以后在 Typora 中插入图片时，就可以自动上传到对应图床啦！ 六、管理图片所有上传的图片都可以在 Gitee 仓库中查看， 也可以在 PicGo 的相册中进行管理 不过可能是插件的原因，对相册中的图片进行的操作都会同步到 Gitee。也就是说在相册中删除图片时，Gitee中的图片也会同步删除，所以一定注意不要误删。","categories":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tigeedev.cn/tags/Hexo/"},{"name":"图床","slug":"图床","permalink":"http://www.tigeedev.cn/tags/%E5%9B%BE%E5%BA%8A/"}],"keywords":[{"name":"充电学习","slug":"充电学习","permalink":"http://www.tigeedev.cn/categories/%E5%85%85%E7%94%B5%E5%AD%A6%E4%B9%A0/"}]}]}